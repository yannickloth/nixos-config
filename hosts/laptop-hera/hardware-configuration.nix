# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot = {
    blacklistedKernelModules = [ 
      "psmouse" # the touchpad does not use psmouse
    ] ++ lib.optionals (!config.hardware.enableRedistributableFirmware) [ "ath3k" ];
    initrd = {
      availableKernelModules = [ 
        "xhci_pci"
        "ahci"
        "nvme" # Enables NVMe support.
        "usbhid"
        "usb_storage"
        "sd_mod"
        "rtsx_pci_sdmmc"
        "aesni_intel" # Speeds up decryption, early during boot process.
        "cryptd" # Speeds up decryption, early during boot process.
      ];
      kernelModules = [ 
        "i915" "nvidia" "nvidia_modeset" "nvidia_drm" "nvidia_uvm" 
        "aesni_intel" # Speeds up decryption, early during boot process.
        "cryptd" # Speeds up decryption, early during boot process.
      ];
      luks = {
        reusePassphrases = true; # When opening a new LUKS device try reusing last successful passphrase. Useful for mounting a number of devices that use the same passphrase without retyping it several times.
        devices = {
          "luks-e9d36e5e-e769-4810-9a47-a30804164d07".device = "/dev/disk/by-uuid/e9d36e5e-e769-4810-9a47-a30804164d07"; #cryptswap
          "luks-8bfcd205-2ef2-4e7c-b22a-fb972a855406".device = "/dev/disk/by-uuid/8bfcd205-2ef2-4e7c-b22a-fb972a855406"; #cryptroot
          "luks-9775b4f8-1168-4eec-b9e2-f6b187a0ed47".device = "/dev/sda1"; #data
        };
      };
    };
    kernelModules = [ "kvm-intel" ];
    kernelPackages = pkgs.linuxKernel.packages.linux_lqx;
    kernelParams = [
      "i915.enable_fbc=1"
      "i915.enable_psr=2"
      "i915.enable_guc=2"
    ];
    #extraModulePackages = [ ];
    kernel.sysctl = { 
      "vm.swappiness" = 10;
      "fs.inotify.max_user_watches" = 2097152; 
    };
#     plymouth = {
#       enable = false;
#     };
  };
  
  fileSystems = {
    "/" =
    { device = "/dev/disk/by-uuid/6ad2a6b4-166d-4171-b047-49f17ab18181";
      fsType = "btrfs";
      options = [ "subvol=@" ];
    };
    "/boot" =
    { 
      # device = "/dev/disk/by-partuuid/D52884F4-8461-3B48-B533-8592E0E188BA";
      device = "/dev/nvme0n1p1";
      fsType = "vfat";
    };
    "/data" =
    { device = "/dev/mapper/luks-9775b4f8-1168-4eec-b9e2-f6b187a0ed47";
      fsType = "btrfs";
    };
  };
  swapDevices =
  [ 
    { device = "/dev/disk/by-uuid/0fa21d3a-4532-49ea-89be-48e87adadb94"; }
    {
      device = "/swapfile"; 
      size = 32768;
    }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp60s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  environment.variables = {
    VDPAU_DRIVER = lib.mkIf config.hardware.opengl.enable (lib.mkDefault "va_gl");
  };

  services = {
    btrfs = {
      autoScrub = {
        enable = true;
        interval = "weekly";
        fileSystems = [ "/" ];
      };
    };
    # Load nvidia driver for Xorg and Wayland
    xserver.videoDrivers = ["nvidia"];
    # This will save you money and possibly your life!
    thermald.enable = true;
  };
  
  # Enable OpenGL
  hardware.opengl = {
    enable = true;
    driSupport = true;
    driSupport32Bit = true;
  };
  
  hardware.nvidia = {

    # Modesetting is required.
    modesetting.enable = true;

    # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
    powerManagement.enable = false;
    # Fine-grained power management. Turns off GPU when not in use.
    # Experimental and only works on modern Nvidia GPUs (Turing or newer).
    powerManagement.finegrained = false;

    # Use the NVidia open source kernel module (not to be confused with the
    # independent third-party "nouveau" open source driver).
    # Support is limited to the Turing and later architectures. Full list of 
    # supported GPUs is at: 
    # https://github.com/NVIDIA/open-gpu-kernel-modules#compatible-gpus 
    # Only available from driver 515.43.04+
    # Currently alpha-quality/buggy, so false is currently the recommended setting.
    open = false;

    # Enable the Nvidia settings menu, accessible via `nvidia-settings`.
    nvidiaSettings = true;

    # Optionally, you may need to select the appropriate driver version for your specific GPU.
    package = config.boot.kernelPackages.nvidiaPackages.stable;
  };
  hardware.nvidia.prime = {
#    sync = {
#       enable = true;
#     };
    
    offload.enable = lib.mkForce true;
    offload.enableOffloadCmd = lib.mkForce true;
    sync.enable = lib.mkForce false;
    
    # Make sure to use the correct Bus ID values for your system!
    intelBusId = "PCI:0:2:0";
    nvidiaBusId = "PCI:1:0:0";
  };
#   specialisation = {
#     on-the-go.configuration = {
#       system.nixos.tags = [ "on-the-go" ];
#       hardware.nvidia = {
#         prime.offload.enable = lib.mkForce true;
#         prime.offload.enableOffloadCmd = lib.mkForce true;
#         prime.sync.enable = lib.mkForce false;
#       };
#     };
#   };
}
